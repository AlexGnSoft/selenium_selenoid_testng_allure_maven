package smoke;

import base.BaseTest;
import com.carespeak.domain.entities.client.Client;
import com.carespeak.domain.entities.message.Module;
import com.carespeak.domain.entities.program.ProgramAccess;
import org.testng.Assert;

import java.io.File;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class SmokeBaseTest extends BaseTest {

    protected Client client;
    protected String programName;

    private static AtomicInteger clientsCount = new AtomicInteger(0);

    protected Client createNewClient() {
        client = createClientData();

        site.loginSteps()
                .openSite()
                .loginAs(user, password);

        Client actualClient = site.adminToolsSteps()
                .addNewClient(client, Module.CHECK_ALL)
                .getClientByCode(client.getCode());

        Assert.assertEquals(actualClient, client, "Actual client differs from expected client");
        return client;
    }

    protected void createProgram() {
        programName = createProgram(client);
    }

    protected Client createClientData() {
        int number = clientsCount.addAndGet(1);
        Client client = new Client();
        client.setCode("AutoGenerated-" + number + "-" + getFormattedDate("dd-MM-yy-H-mm-ss"));
        client.setName("Automator " + getRandomString());
        client.setEndpoint("twilioSmsSender5 [TWILIO +17542272273]");
        client.setModules(Module.getAllModules());
        return client;
    }

    protected String createProgram(Client client) {
        String programName = "AutoGenerated program " + getFormattedDate("dd-MM-yy-H-mm-ss");
        site.programSteps().addNewProgram(client.getName(), programName, ProgramAccess.PUBLIC);

        String actualProgramName = site.programSteps()
                .getProgramByName(client.getName(), programName);
        Assert.assertEquals(actualProgramName, programName, "Actual program differs from expected program");

        return programName;
    }

    protected void removeClient() {
        removeClient(client);
    }

    protected void removeClient(Client client) {
        if (client != null) {
            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            site.adminToolsSteps()
                    .removeClient(client);

            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            Client shouldBeRemoved = site.adminToolsSteps()
                    .getClientByCode(client.getCode());
            Assert.assertNull(shouldBeRemoved, "Client " + client + " was not removed!");
        }
    }

    protected String getResourcesPath() {
        String defaultPath = System.getProperty("user.dir") +
                File.separator + "src" +
                File.separator + "main" +
                File.separator + "resources" +
                File.separator + "data";
        return System.getProperty("resources.path", defaultPath);
    }
}
