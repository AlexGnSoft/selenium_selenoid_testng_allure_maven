package smoke;

import base.BaseTest;
import com.carespeak.domain.entities.client.Language;
import com.carespeak.domain.entities.message.Module;
import com.carespeak.domain.entities.program.Client;
import com.carespeak.domain.entities.program.ProgramAccess;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.Arrays;
import java.util.List;

public class ClientLevelTest extends SmokeBaseTest {

    private Client client;

    @BeforeClass
    public void prepareClientData() {
        client = createClient();
        site.loginSteps().openSite().loginAs(user, password);
    }

    @Test(description = "Add new client with SMS aggregator and all modules")
    public void addNewClient() {
        Client actualClient = site.adminToolsSteps()
                .addNewClient(client, Module.CHECK_ALL)
                .getClientByCode(client.getCode());
        Assert.assertEquals(actualClient, client, "Actual client differs from expected client");
    }

    @Test(description = "Edit client's modules", dependsOnMethods = "addNewClient")
    public void editClientsModules() {
        Module[] modulesToSet = {Module.BIOMETRIC, Module.EDUCATION, Module.MOTIVATION};
        client.setModules(modulesToSet);

        Client updatedClient = site.adminToolsSteps()
                .editClientsModules(client.getCode(), modulesToSet)
                .getClientByCode(client.getCode());

        Assert.assertEquals(updatedClient, client, "Actual client data differs from expected");
    }

    @Test(description = "Check client's modules for messages", dependsOnMethods = "editClientsModules")
    public void checkClientsModulesForMessages() {
        String programName = "AutoGenerated program " + getFormattedDate("dd-MM-yy-H-mm");
        site.programSteps()
                .addNewProgram(client.getName(), programName, ProgramAccess.PUBLIC);
        List<Module> availableModules = site.messagesSteps()
                .goToMessagesTab()
                .getAvailableModules(client.getName());

        Assert.assertEquals(availableModules, client.getModules(),
                "Modules available for messaging are not equal to users modules.\n" +
                        "Available: " + availableModules + "\n" +
                        "Client modules: " + client.getModules() + "\n");
    }

    @Test(description = "Add additional language for client", dependsOnMethods = "checkClientsModulesForMessages")
    public void addAdditionalLanguageForClient() {
        List<Language> expectedLanguages = Arrays.asList(Language.CH, Language.DU);

        site.loginSteps().openSite().loginAs(user, password);
        List<Language> actualLanguages = site.adminToolsSteps()
                .goToClientSettings(client.getCode())
                .addAdditionalLanguage(expectedLanguages)
                .goToClientSettings(client.getCode())
                .getAdditionalLanguages();

        Assert.assertTrue(actualLanguages.containsAll(expectedLanguages),
                "Additional languages should contain next values:\n" +
                        Arrays.toString(expectedLanguages.toArray()) + "\n" +
                        "but additional languages is " + Arrays.toString(actualLanguages.toArray()) + "\n");
    }

    @Test(description = "Remove additional language for client", dependsOnMethods = "addAdditionalLanguageForClient")
    public void removeAdditionalLanguageForClient() {
        Language languageToRemove = Language.CH;

        List<Language> actualLanguages = site.adminToolsSteps()
                .goToClientSettings(client.getCode())
                .removeAdditionalLanguage(languageToRemove)
                .goToClientSettings(client.getCode())
                .getAdditionalLanguages();

        Assert.assertFalse(actualLanguages.contains(languageToRemove),
                "Additional languages should not contain value:\n" +
                        languageToRemove + "\n" +
                        "but additional languages is " + Arrays.toString(actualLanguages.toArray()) + "\n");
    }

    @AfterClass
    public void removeClient() {
        if (client != null) {
            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            site.adminToolsSteps()
                    .removeClient(client);

            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            Client shouldBeRemoved = site.adminToolsSteps().getClientByCode(client.getCode());

            Assert.assertNull(shouldBeRemoved, "Client " + client + " was not removed!");
        }
    }

}
