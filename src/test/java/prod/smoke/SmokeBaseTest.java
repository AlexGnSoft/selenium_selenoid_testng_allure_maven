package prod.smoke;

import com.carespeak.domain.entities.client.Client;
import com.carespeak.domain.entities.common.Sex;
import com.carespeak.domain.entities.message.Module;
import com.carespeak.domain.entities.program.Patient;
import com.carespeak.domain.entities.program.ProgramAccess;
import org.testng.Assert;
import prod.base.BaseTest;

import java.io.File;
import java.util.List;

public abstract class SmokeBaseTest extends BaseTest {

    protected Client client;
    protected String programName;

    //@BeforeSuite(alwaysRun = true)
    public void readData() {
        site.loginSteps()
                .openSite()
                .loginAs(user, password);

        client = site.adminToolsSteps().getClientByCode("Test Automator");
        if (client == null) {
            Client testAutomator = new Client();
            testAutomator.setName("Test Automator");
            testAutomator.setModules(Module.CHECK_ALL);
            testAutomator.setCode("Test Automator");
            testAutomator.setEndpoint("twilioSmsSender5 [TWILIO +17542272273]");
            site.adminToolsSteps().addNewClient(client, Module.CHECK_ALL);
            client = testAutomator;
        }

        String programName = defaultProgram();
        try {
            site.programSteps().goToProgramSettings(client.getName(), programName);
        } catch (Throwable t) {
            //TODO: implement without try catch
            site.programSteps().addNewProgram(client.getName(), programName, ProgramAccess.PUBLIC);
        }

        List<Patient> patientList = site.programSteps().getPatients(client, programName);
        if (patientList.size() == 0) {
            Patient patient = new Patient();
            patient.setFirstName("Patient");
            patient.setLastName("Automator");
            patient.setSex(Sex.MALE);
            patient.setCellPhone("+15554622669");
            patient.setTimezone("Eastern Time (New York)");
            site.programSteps().addNewPatient(patient, client, programName);
            patientList.add(patient);
        }
        patients.setEntities(patientList);
        site.loginSteps().openSite().loginAs(user, password);
    }

    protected String defaultProgram() {
        return "Default";
    }

    protected void createProgram() {
        programName = createProgram(client);
    }

    protected String createProgram(Client client) {
        String programName = "AutoGenerated program " + getFormattedDate("dd-MM-yy-H-mm-ss");
        site.programSteps().addNewProgram(client.getName(), programName, ProgramAccess.PUBLIC);

        String actualProgramName = site.programSteps()
                .getProgramByName(client.getName(), programName);
        Assert.assertEquals(actualProgramName, programName, "Actual program differs from expected program");

        return programName;
    }

    protected void removeClient() {
        removeClient(client);
    }

    protected void removeClient(Client client) {
        if (client != null) {
            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            site.adminToolsSteps()
                    .removeClient(client);

            site.loginSteps()
                    .openSite()
                    .loginAs(user, password);
            Client shouldBeRemoved = site.adminToolsSteps()
                    .getClientByCode(client.getCode());
            Assert.assertNull(shouldBeRemoved, "Client " + client + " was not removed!");
        }
    }

    protected String getResourcesPath() {
        String defaultPath = System.getProperty("user.dir") +
                File.separator + "src" +
                File.separator + "main" +
                File.separator + "resources" +
                File.separator + "data";
        return System.getProperty("resources.path", defaultPath);
    }
}
