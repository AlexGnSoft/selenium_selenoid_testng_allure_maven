package prod.smoke.keyword_signup;

import com.carespeak.core.config.PropertyFileReader;
import com.carespeak.core.constant.Constants;
import com.carespeak.domain.entities.client.Client;
import com.carespeak.domain.entities.common.Sex;
import com.carespeak.domain.entities.message.MessageLogItem;
import com.carespeak.domain.entities.program.Patient;
import com.carespeak.domain.entities.program.ProgramAccess;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class KeywordSignUpLevelTest extends AbstractKeyWordSignUpLevelTest {

    private static final String FROM_PHONE_NUMBER = "+15554622669";
    private static final String FROM_PHONE_NUMBER_2 = "+15554622555";
    private static final String FROM_PHONE_NUMBER_3 = "+15554622556";
    private static final String FROM_PHONE_NUMBER_4 = "+15554622557";
    private static final String FROM_PHONE_NUMBER_5 = "+15554622558";
    private static final String FROM_PHONE_NUMBER_6 = "+15554622559";
    private final String ADD_SIGNUP_QUESTIONS_PATIENT = getRandomLetters();
    private final String ADD_CUSTOM_FIELD_PATIENT = getRandomLetters();
    private final String ADD_VALIDATION_MESSAGE_PATIENT = getRandomLetters();
    private final String ADD_COMPLETED_MESSAGE_PATIENT = getRandomLetters();
    private final String MOVE_PATIENT_TO_SPECIFIC_PROGRAM_PATIENT = getRandomLetters();
    private final String THERAPY_START_DATE = "10/10/22";
    private final String TO_ENDPOINT = PropertyFileReader.getVariableValue("twilioSmsSender");
    private static final String COMPLETED_MESSAGE = "You've successfully completed the registration.";
    private final String SIGN_UP_KEYWORD = getRandomString();

    private Patient patient;
    private Client client;
    private String clientName;
    private String programName;


    @BeforeClass
    public void prepareClientData() {
        client = getTestClientByCode("Keyword_Signup_Client-" + getFormattedDate("dd-MM-yy-H-mm-ss"));
        clientName = client.getName();
        programName = "AutoGenerated program " + getFormattedDate("dd-MM-yy-H-mm");
        patient = new Patient();
        patient.setFirstName("AutoName");
        patient.setLastName("Automator");
        patient.setSex(Sex.MALE);
        patient.setCellPhone(getGeneratedPhoneNumber());
        patient.setTimezone("Eastern Time (New York)");
    }

    @Test(description = "Add keyword for Sign Up")
    public void addKeywordForSignUp() {
        //TODO: Add signup keyword
        site.programSteps()
                .addNewProgram(clientName, programName, ProgramAccess.PUBLIC)
                .goToProgramSettings(clientName, programName)
                .addKeywordForSignUp(SIGN_UP_KEYWORD);
        //TODO: Simulate Signup
        site.adminToolsSteps()
                .simulateSMSToClient(FROM_PHONE_NUMBER, TO_ENDPOINT, SIGN_UP_KEYWORD);

        String expectedMessage = String.format(Constants.MessageTemplate.CONFIRM_SUBSCRIPTION, programName);
        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);

        Assert.assertEquals(signupResponse.getMessage(), expectedMessage, "Received message is not the same as expected!");
    }

    @Test(description = "Simulate health alerts subscription confirmation (simulate patient's AGREE response)", dependsOnMethods = "addKeywordForSignUp")
    public void simulateConfirmation() {
        //TODO: Simulate AGREE patient' response
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER, TO_ENDPOINT, "AGREE");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Successful sign up with questions", dependsOnMethods = {"addKeywordForSignUp", "simulateConfirmation"})
    public void addSignupQuestions() {
        //TODO: Set signup keyword and add questions
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addAccountCreationQuestion(false,
                        "Name and optional surname",
                        "Enter your name, please",
                        "Wrong name entered, try again")
                .addAccountCreationQuestion(false,
                        "E-Mail",
                        "Enter your email, or type SKIP to skip this question",
                        "Wrong email entered, try again");

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name and Skip
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkip(clientName, programName, FROM_PHONE_NUMBER_2, TO_ENDPOINT, SIGN_UP_KEYWORD, ADD_SIGNUP_QUESTIONS_PATIENT);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_2);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Successful sign up with custom fields", dependsOnMethods = {"addKeywordForSignUp", "simulateConfirmation", "addSignupQuestions"})
    public void addCustomField() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addCustomFields("Rx Therapy Start Date")
                .addAccountCreationQuestion(false,
                        "Event: Rx Therapy Start Date",
                        "Enter your Therapy Start Date, please",
                        "Wrong Start Date, try again");

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name, Skip and Start therapy date
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkipDate(clientName, programName, FROM_PHONE_NUMBER_3, TO_ENDPOINT, SIGN_UP_KEYWORD, ADD_CUSTOM_FIELD_PATIENT, THERAPY_START_DATE);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_3);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Check if validation message is added using dynamic variables", dependsOnMethods = {"addKeywordForSignUp", "simulateConfirmation", "addSignupQuestions", "addCustomField"})
    public void addValidationMessage() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addValidationMessage("Please validate the data you've shared with us by texting back Yes or No\n" +
                        "\n" +
                        "Name: ${p} \n" +
                        "Therapy Start Date: ${event:Rx Therapy Start Date}");

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name, Skip and Start therapy date
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkipDate(clientName, programName, FROM_PHONE_NUMBER_4, TO_ENDPOINT, SIGN_UP_KEYWORD,ADD_VALIDATION_MESSAGE_PATIENT, THERAPY_START_DATE);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, "No");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, ADD_VALIDATION_MESSAGE_PATIENT);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, "SKIP");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, THERAPY_START_DATE);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, "Yes");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(ADD_VALIDATION_MESSAGE_PATIENT);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Check if completed message is added", dependsOnMethods = {"addKeywordForSignUp", "simulateConfirmation", "addSignupQuestions", "addCustomField", "addValidationMessage"})
    public void addCompletedMessage() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addCompletedMessage(COMPLETED_MESSAGE);

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name, Skip and Start therapy date
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkipDate(clientName, programName, FROM_PHONE_NUMBER_5, TO_ENDPOINT, SIGN_UP_KEYWORD, ADD_COMPLETED_MESSAGE_PATIENT, THERAPY_START_DATE);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_5, TO_ENDPOINT, "Yes");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(ADD_COMPLETED_MESSAGE_PATIENT);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_5);

        Assert.assertEquals(signupResponse.getMessage(), COMPLETED_MESSAGE, "Received message is not the same as expected!");
    }

    @Test(description = "Move patient to a specific program based on the keyword answer", dependsOnMethods = {"addKeywordForSignUp", "simulateConfirmation", "addSignupQuestions", "addCustomField", "addValidationMessage", "addCompletedMessage"})
    public void movePatientToSpecificProgram() {
        String landingProgram = "AutoGenerated landing program " + getFormattedDate("dd-MM-yy-H-mm");
        site.programSteps().addNewProgram(clientName, landingProgram, ProgramAccess.PUBLIC);

        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addDestinationProgramQuestionKeywords("MOVING", landingProgram)
                .addAccountCreationQuestion(false,
                        "Destination Program",
                        "Enter MOVE if you'd like to be moved to another program. Or type SKIP if you wish to stay in this one.",
                        "Wrong response, try again");

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name, Skip and Start therapy date
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkipDate(clientName, programName, FROM_PHONE_NUMBER_6, TO_ENDPOINT, SIGN_UP_KEYWORD, MOVE_PATIENT_TO_SPECIFIC_PROGRAM_PATIENT, THERAPY_START_DATE);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_6, TO_ENDPOINT, "MOVING");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_6);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_6, TO_ENDPOINT, "Yes");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(MOVE_PATIENT_TO_SPECIFIC_PROGRAM_PATIENT);

        boolean isPatientMoved = site.programSteps()
                .goToProgramSettings(clientName, landingProgram)
//                .isInProgram(landingProgram, patient);
                 .isInProgram(landingProgram, MOVE_PATIENT_TO_SPECIFIC_PROGRAM_PATIENT);

        Assert.assertTrue(isPatientMoved, "The patient was not moved!");
    }

    @AfterClass
    public void cleanUpClientData() {
        removeClient(client);
    }
}
