package prod.smoke.keyword_signup;

import com.carespeak.core.config.PropertyFileReader;
import com.carespeak.core.constant.Constants;
import com.carespeak.domain.entities.client.Client;
import com.carespeak.domain.entities.common.Sex;
import com.carespeak.domain.entities.message.MessageLogItem;
import com.carespeak.domain.entities.program.Patient;
import com.carespeak.domain.entities.program.ProgramAccess;
import com.carespeak.domain.steps.ProgramSteps;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class KeywordSignUpLevelTest extends AbstractKeyWordSignUpLevelTest {

    private static final String FROM_PHONE_NUMBER = "+15554622669";
    private static final String FROM_PHONE_NUMBER_2 = "+15554622555";
    private static final String FROM_PHONE_NUMBER_3 = "+15554622556";
    private static final String FROM_PHONE_NUMBER_4 = "+15554622557";
    private static final String FROM_PHONE_NUMBER_5 = "+15554622558";
    private static final String FROM_PHONE_NUMBER_6 = "+15554622559";
    private static final String FROM_PHONE_NUMBER_7 = "+15554622560";
    private final String ADD_SIGNUP_QUESTIONS_PATIENT = getRandomLetters();
    private final String ADD_CUSTOM_FIELD_PATIENT = getRandomLetters();
    private final String ADD_VALIDATION_MESSAGE_PATIENT = getRandomLetters();
    private final String ADD_COMPLETED_MESSAGE_PATIENT = getRandomLetters();
    private final String THERAPY_START_DATE = "10/10/22";
    private final String TO_ENDPOINT = PropertyFileReader.getVariableValue("twilioSmsSender");
    private static final String COMPLETED_MESSAGE = "You've successfully completed the registration.";
    private final String SIGN_UP_KEYWORD = getRandomString();

    private Patient patient;
    private Client client;
    private String clientName;
    private String programName;


    @BeforeClass
    public void prepareClientData() {
        client = getTestClientByCode("Keyword_Signup_Client-" + getFormattedDate("dd-MM-yy-H-mm-ss"));
        clientName = client.getName();
        programName = "AutoGenerated init program " + getFormattedDate("dd-MM-yy-H-mm");
        patient = new Patient();
        patient.setFirstName("AutoName"+getRandomString());
        patient.setLastName("Automator");
        patient.setSex(Sex.MALE);
        patient.setCellPhone(getGeneratedPhoneNumber());
        patient.setTimezone("Eastern Time (New York)");
        //TODO: Add signup keyword
        site.programSteps()
                .addNewProgram(clientName, programName, ProgramAccess.PUBLIC)
                .goToProgramSettings(clientName, programName).addKeywordForSignUp(SIGN_UP_KEYWORD);
    }

    @Test(description = "Add keyword for Sign Up")
    public void addKeywordForSignUp_MHM_T38() {
        //TODO: Simulate Signup of a new patient
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER, TO_ENDPOINT, SIGN_UP_KEYWORD);

        String expectedMessage = String.format(Constants.MessageTemplate.CONFIRM_SUBSCRIPTION, programName);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);

        Assert.assertEquals(signupResponse.getMessage(), expectedMessage, "Received message is not the same as expected!");
    }

    @Test(description = "Simulate health alerts subscription confirmation (simulate patient's AGREE response)")
    public void simulateConfirmation_MHM_T115() {
        //TODO: Simulate Signup of a new patient
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER, TO_ENDPOINT, SIGN_UP_KEYWORD);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);
        //TODO: Simulate AGREE
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER, TO_ENDPOINT, "AGREE");

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Successful sign up with questions")
    public void addSignupQuestions_MHM_T39() {
        //TODO: Add questions
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addAccountCreationQuestion(false,
                        "Name and optional surname",
                        "Enter your name, please",
                        "Wrong name entered, try again")
                .addAccountCreationQuestion(false,
                        "E-Mail",
                        "Enter your email, or type SKIP to skip this question",
                        "Wrong email entered, try again");

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name and Skip
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkip(clientName, programName, FROM_PHONE_NUMBER_2, TO_ENDPOINT, SIGN_UP_KEYWORD, ADD_SIGNUP_QUESTIONS_PATIENT);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_2);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Successful sign up with custom fields")
    public void addCustomField_MHM_T40() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addCustomFields("Rx Therapy Start Date")
                .addAccountCreationQuestion(false,
                        "Event: Rx Therapy Start Date",
                        "Enter your Therapy Start Date, please",
                        "Wrong Start Date, try again");

        //TODO: Simulate E2E Signup of a new patient
        site.adminToolsSteps()
                .initiateKeywordSignupSendAndAgree(clientName, programName,FROM_PHONE_NUMBER_3,TO_ENDPOINT, SIGN_UP_KEYWORD)
                .simulateSMSToClient(FROM_PHONE_NUMBER_3, TO_ENDPOINT, THERAPY_START_DATE);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_3);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Check if validation message is added using dynamic variables")
    public void addValidationMessage_MHM_T56() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addCustomFields("Rx Therapy Start Date")
                .addAccountCreationQuestion(false,
                        "Event: Rx Therapy Start Date",
                        "Enter your Therapy Start Date, please",
                        "Wrong Start Date, try again")
                .addValidationMessage("Please validate the data you've shared with us by texting back Yes or No\n" +
                        "\n" +
                        "Name: ${p} \n" +
                        "Therapy Start Date: ${event:Rx Therapy Start Date}");

        //TODO: Simulate AGREE
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, SIGN_UP_KEYWORD);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, "AGREE");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4,TO_ENDPOINT, THERAPY_START_DATE);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4, TO_ENDPOINT, "No");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4,TO_ENDPOINT, THERAPY_START_DATE);
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_4,TO_ENDPOINT, "Yes");

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_4);

        Assert.assertEquals(signupResponse.getMessage(), Constants.MessageTemplate.ACCOUNT_ACTIVATED, "Received message is not the same as expected!");
    }

    @Test(description = "Check if completed message is added", dependsOnMethods = {"addKeywordForSignUp_MHM_T38", "simulateConfirmation_MHM_T115", "addSignupQuestions_MHM_T39", "addCustomField_MHM_T40", "addValidationMessage_MHM_T56"})
    public void addCompletedMessage_MHM_T43() {
        site.programSteps()
                .goToProgramSettings(clientName, programName)
                .addCompletedMessage(COMPLETED_MESSAGE);

        //TODO: Simulate sms from patient to client with SignUp, Agree, Patient name, Skip and Start therapy date
        site.adminToolsSteps()
                .initiateKeywordSignupSendAgreeNameAndSkipDate(clientName, programName, FROM_PHONE_NUMBER_5, TO_ENDPOINT, SIGN_UP_KEYWORD, ADD_COMPLETED_MESSAGE_PATIENT, THERAPY_START_DATE);

        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_5, TO_ENDPOINT, "Yes");
        site.programSteps().goToProgramSettings(clientName, programName).getLastMessageFromLogsForNumber(ADD_COMPLETED_MESSAGE_PATIENT);

        MessageLogItem signupResponse = site.programSteps()
                .goToProgramSettings(clientName, programName)
                .getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_5);

        Assert.assertEquals(signupResponse.getMessage(), COMPLETED_MESSAGE, "Received message is not the same as expected!");
    }

    @Test(description = "Move patient to a specific program based on the keyword answer", dependsOnMethods = {"addKeywordForSignUp_MHM_T38", "simulateConfirmation_MHM_T115", "addSignupQuestions_MHM_T39", "addCustomField_MHM_T40", "addValidationMessage_MHM_T56", "addCompletedMessage_MHM_T43"})
    public void movePatientToSpecificProgram_MHM_T141() {
        String SIGN_UP_KEYWORD_2 = getRandomString();

        //TODO: Create separate initial program and keyword
        String newInitProgram = "AutoGenerated newInit program " + getFormattedDate("dd-MM-yy-H-mm");
        site.programSteps()
                .addNewProgram(clientName, newInitProgram, ProgramAccess.PUBLIC)
                .addKeywordForSignUp(SIGN_UP_KEYWORD_2);

        //TODO: Create landing program
        String landingProgram = "AutoGenerated landing program " + getFormattedDate("dd-MM-yy-H-mm");
        site.programSteps().addNewProgram(clientName, landingProgram, ProgramAccess.PUBLIC);

        //TODO: Add moving to another program question
        site.programSteps()
                .goToProgramSettings(clientName, newInitProgram)
                .addDestinationProgramQuestionKeywords("MOVING", landingProgram)
                .addAccountCreationQuestion(false,
                        "Destination Program",
                        "Enter MOVING if you'd like to be moved to another program. Or type SKIP if you wish to stay in this one.",
                        "Wrong response, try again");

        //TODO: Simulate sms from patient to SignUp and AGREE to newInitProgram
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_6, TO_ENDPOINT, SIGN_UP_KEYWORD_2);
        site.programSteps().goToProgramSettings(clientName, newInitProgram).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_6);
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_6, TO_ENDPOINT, "AGREE");
        site.programSteps().goToProgramSettings(clientName, newInitProgram).getLastMessageFromLogsForNumber(FROM_PHONE_NUMBER_6);
        //TODO: Simulate 'move' patient from newInitProgram to landingProgram
        site.adminToolsSteps().simulateSMSToClient(FROM_PHONE_NUMBER_6, TO_ENDPOINT, "MOVING");

        boolean isPatientMoved = site.programSteps()
                .goToProgramSettings(clientName, landingProgram)
                .isInProgram(landingProgram, FROM_PHONE_NUMBER_6);

        Assert.assertTrue(isPatientMoved, "The patient was not moved!");
    }

    @AfterClass(alwaysRun = true)
    public void cleanUpClientData() {
        removeClient(client);
    }
}
